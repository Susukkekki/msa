/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.samsung.sds.demo.api;

import com.samsung.sds.demo.api.model.LocationRequest;
import com.samsung.sds.demo.api.model.Locations;
import com.samsung.sds.demo.api.model.ProblemDetails;
import java.util.UUID;
import com.samsung.sds.demo.api.model.UserLocation;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Locations", description = "the Locations API")
public interface LocationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/Locations/{locationId}
     *
     * @param locationId  (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "", nickname = "getLocation", notes = "", response = Locations.class, tags={ "Locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Locations.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Locations/{locationId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<Locations> _getLocation(@ApiParam(value = "", required = true) @PathVariable("locationId") Integer locationId) {
        return getLocation(locationId);
    }

    // Override this method
    default  ResponseEntity<Locations> getLocation(Integer locationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"polygon\" : { \"coordinates\" : [ [ [ 5.637376656633329, 5.637376656633329 ], [ 5.637376656633329, 5.637376656633329 ] ], [ [ 5.637376656633329, 5.637376656633329 ], [ 5.637376656633329, 5.637376656633329 ] ] ], \"type\" : \"type\" }, \"locationId\" : 0, \"parent_Id\" : \"parent_Id\", \"latitude\" : 6.027456183070403, \"description\" : \"description\", \"location\" : { \"coordinates\" : [ 5.962133916683182, 5.962133916683182 ], \"type\" : \"type\" }, \"id\" : \"id\", \"longitude\" : 1.4658129805029452 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Locations
     *
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "", nickname = "getLocationList", notes = "", response = Locations.class, responseContainer = "List", tags={ "Locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Locations.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Locations",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<List<Locations>> _getLocationList() {
        return getLocationList();
    }

    // Override this method
    default  ResponseEntity<List<Locations>> getLocationList() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"polygon\" : { \"coordinates\" : [ [ [ 5.637376656633329, 5.637376656633329 ], [ 5.637376656633329, 5.637376656633329 ] ], [ [ 5.637376656633329, 5.637376656633329 ], [ 5.637376656633329, 5.637376656633329 ] ] ], \"type\" : \"type\" }, \"locationId\" : 0, \"parent_Id\" : \"parent_Id\", \"latitude\" : 6.027456183070403, \"description\" : \"description\", \"location\" : { \"coordinates\" : [ 5.962133916683182, 5.962133916683182 ], \"type\" : \"type\" }, \"id\" : \"id\", \"longitude\" : 1.4658129805029452 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Locations/user/{userId}
     *
     * @param userId  (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "", nickname = "getUserLocation", notes = "", response = UserLocation.class, tags={ "Locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserLocation.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Locations/user/{userId}",
        produces = { "text/plain", "application/json", "text/json" }
    )
    default ResponseEntity<UserLocation> _getUserLocation(@ApiParam(value = "", required = true) @PathVariable("userId") UUID userId) {
        return getUserLocation(userId);
    }

    // Override this method
    default  ResponseEntity<UserLocation> getUserLocation(UUID userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"locationId\" : 0, \"id\" : \"id\", \"userId\" : \"userId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/Locations
     *
     * @param locationRequest  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "", nickname = "postLocation", notes = "", tags={ "Locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/Locations",
        produces = { "text/plain", "application/json", "text/json" },
        consumes = { "application/json-patch+json", "application/json", "text/json", "application/_*+json" }
    )
    default ResponseEntity<Void> _postLocation(@ApiParam(value = "") @Valid @RequestBody(required = false) LocationRequest locationRequest) {
        return postLocation(locationRequest);
    }

    // Override this method
    default  ResponseEntity<Void> postLocation(LocationRequest locationRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
